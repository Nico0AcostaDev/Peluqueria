// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using peluqueria.AccesoDatos;

namespace peluqueria.Models;

public partial class PeluqueriaContext : DbContext
{
    public PeluqueriaContext(DbContextOptions<PeluqueriaContext> options)
        : base(options)
    {
    }

    public static PeluqueriaContext CreateDbContext()
    {
        var optionsBuilder = new DbContextOptionsBuilder<PeluqueriaContext>();
        optionsBuilder.UseSqlServer(Connect.ConnectionString());

        return new PeluqueriaContext(optionsBuilder.Options);
    }

    public virtual DbSet<AsistenciaEmpleado> AsistenciaEmpleados { get; set; }

    public virtual DbSet<CatProducto> CatProductos { get; set; }

    public virtual DbSet<CatServicio> CatServicios { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Compra> Compras { get; set; }

    public virtual DbSet<DetalleVentaProducto> DetalleVentaProductos { get; set; }

    public virtual DbSet<DetalleVentaServicio> DetalleVentaServicios { get; set; }

    public virtual DbSet<Empleado> Empleados { get; set; }

    public virtual DbSet<Producto> Productos { get; set; }

    public virtual DbSet<ProductosComprado> ProductosComprados { get; set; }

    public virtual DbSet<Proveedore> Proveedores { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Servicio> Servicios { get; set; }

    public virtual DbSet<Turno> Turnos { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<Venta> Ventas { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AsistenciaEmpleado>(entity =>
        {
            entity.HasKey(e => e.IdAsistencia).HasName("PK__asistenc__D0454A9A2FBB2869");

            entity.ToTable("asistencia_empleados");

            entity.Property(e => e.IdAsistencia).HasColumnName("id_asistencia");
            entity.Property(e => e.DiaAsistencia).HasColumnName("dia_asistencia");
            entity.Property(e => e.IdEmpleado).HasColumnName("id_empleado");

            entity.HasOne(d => d.IdEmpleadoNavigation).WithMany(p => p.AsistenciaEmpleados)
                .HasForeignKey(d => d.IdEmpleado)
                .HasConstraintName("fk_asistencia_empleados_empleados");
        });

        modelBuilder.Entity<CatProducto>(entity =>
        {
            entity.HasKey(e => e.CategoriaId).HasName("PK__cat_prod__DB875A4FD4DCB620");

            entity.ToTable("cat_productos");

            entity.Property(e => e.CategoriaId)
                .ValueGeneratedNever()
                .HasColumnName("categoria_id");
            entity.Property(e => e.NombreCategoria)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_categoria");
        });

        modelBuilder.Entity<CatServicio>(entity =>
        {
            entity.HasKey(e => e.ServicioId).HasName("PK__cat_serv__AF3A090CD2A2AEE3");

            entity.ToTable("cat_servicios");

            entity.Property(e => e.ServicioId)
                .ValueGeneratedNever()
                .HasColumnName("servicio_id");
            entity.Property(e => e.NombreServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_servicio");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("PK__clientes__677F38F578C1601C");

            entity.ToTable("clientes");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Direccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FechaNacimiento).HasColumnName("fecha_nacimiento");
            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("fecha_registro");
            entity.Property(e => e.InfoRelevante)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("info_relevante");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("telefono");
        });

        modelBuilder.Entity<Compra>(entity =>
        {
            entity.HasKey(e => e.CompraId).HasName("PK__compras__7B94793CB7944748");

            entity.ToTable("compras");

            entity.Property(e => e.CompraId)
                .ValueGeneratedNever()
                .HasColumnName("compra_id");
            entity.Property(e => e.FechaCompra).HasColumnName("fecha_compra");
            entity.Property(e => e.ProveedorId).HasColumnName("proveedor_id");
            entity.Property(e => e.TotalCompra)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total_compra");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.Compras)
                .HasForeignKey(d => d.ProveedorId)
                .HasConstraintName("fk_proveedor_compras");
        });

        modelBuilder.Entity<DetalleVentaProducto>(entity =>
        {
            entity.HasKey(e => e.IdDetalleProducto).HasName("PK__detalle___C88208254D86CD1A");

            entity.ToTable("detalle_venta_productos");

            entity.Property(e => e.IdDetalleProducto).HasColumnName("id_detalle_producto");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.IdProducto).HasColumnName("id_producto");
            entity.Property(e => e.IdVenta).HasColumnName("id_venta");
            entity.Property(e => e.MontoProducto)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("monto_producto");

            entity.HasOne(d => d.IdProductoNavigation).WithMany(p => p.DetalleVentaProductos)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("fk_detalle_venta_productos_producto");

            entity.HasOne(d => d.IdVentaNavigation).WithMany(p => p.DetalleVentaProductos)
                .HasForeignKey(d => d.IdVenta)
                .HasConstraintName("fk_detalle_venta_productos_venta");
        });

        modelBuilder.Entity<DetalleVentaServicio>(entity =>
        {
            entity.HasKey(e => e.IdDetalleServicio).HasName("PK__detalle___5B2B9FD9310BF0AE");

            entity.ToTable("detalle_venta_servicios");

            entity.Property(e => e.IdDetalleServicio).HasColumnName("id_detalle_servicio");
            entity.Property(e => e.IdServicio).HasColumnName("id_servicio");
            entity.Property(e => e.IdVenta).HasColumnName("id_venta");
            entity.Property(e => e.MontoServicio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("monto_servicio");

            entity.HasOne(d => d.IdServicioNavigation).WithMany(p => p.DetalleVentaServicios)
                .HasForeignKey(d => d.IdServicio)
                .HasConstraintName("fk_detalle_venta_servicios_servicio");

            entity.HasOne(d => d.IdVentaNavigation).WithMany(p => p.DetalleVentaServicios)
                .HasForeignKey(d => d.IdVenta)
                .HasConstraintName("fk_detalle_venta_servicios_venta");
        });

        modelBuilder.Entity<Empleado>(entity =>
        {
            entity.HasKey(e => e.IdEmpleado).HasName("PK__empleado__88B51394EF9BEAF3");

            entity.ToTable("empleados");

            entity.Property(e => e.IdEmpleado).HasColumnName("id_empleado");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FechaContratacion).HasColumnName("fecha_contratacion");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("telefono");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.HasKey(e => e.IdProducto).HasName("PK__producto__FF341C0D851509D4");

            entity.ToTable("productos");

            entity.Property(e => e.IdProducto).HasColumnName("id_producto");
            entity.Property(e => e.CategoriaId).HasColumnName("categoria_id");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.NombreProducto)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombre_producto");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");
            entity.Property(e => e.Stock).HasColumnName("stock");

            entity.HasOne(d => d.Categoria).WithMany(p => p.Productos)
                .HasForeignKey(d => d.CategoriaId)
                .HasConstraintName("fk_productos_categoria");
        });

        modelBuilder.Entity<ProductosComprado>(entity =>
        {
            entity.HasKey(e => e.ProductoCompraId).HasName("PK__producto__7E65942DF8F01181");

            entity.ToTable("productos_comprados");

            entity.Property(e => e.ProductoCompraId)
                .ValueGeneratedNever()
                .HasColumnName("producto_compra_id");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.CompraId).HasColumnName("compra_id");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio_unitario");
            entity.Property(e => e.ProductoId).HasColumnName("producto_id");
            entity.Property(e => e.Subtotal)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("subtotal");

            entity.HasOne(d => d.Compra).WithMany(p => p.ProductosComprados)
                .HasForeignKey(d => d.CompraId)
                .HasConstraintName("fk_compra_productos_comprados");

            entity.HasOne(d => d.Producto).WithMany(p => p.ProductosComprados)
                .HasForeignKey(d => d.ProductoId)
                .HasConstraintName("fk_producto");
        });

        modelBuilder.Entity<Proveedore>(entity =>
        {
            entity.HasKey(e => e.IdProveedor).HasName("PK__proveedo__8D3DFE28ED8B92A3");

            entity.ToTable("proveedores");

            entity.Property(e => e.IdProveedor)
                .ValueGeneratedNever()
                .HasColumnName("id_proveedor");
            entity.Property(e => e.ApellidoProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("apellido_proveedor");
            entity.Property(e => e.CorreoElectronico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("correo_electronico");
            entity.Property(e => e.Direccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("direccion");
            entity.Property(e => e.NombreProveedor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre_proveedor");
            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("telefono");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.IdRol).HasName("PK__roles__6ABCB5E0E113A30C");

            entity.ToTable("roles");

            entity.Property(e => e.IdRol)
                .ValueGeneratedNever()
                .HasColumnName("id_rol");
            entity.Property(e => e.NombreRol)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_rol");
        });

        modelBuilder.Entity<Servicio>(entity =>
        {
            entity.HasKey(e => e.ServicioId).HasName("PK__servicio__AF3A090CB1834B5B");

            entity.ToTable("servicios");

            entity.Property(e => e.ServicioId).HasColumnName("servicio_id");
            entity.Property(e => e.CategoriaId).HasColumnName("categoria_id");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.NombreServicio)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_servicio");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.Categoria).WithMany(p => p.Servicios)
                .HasForeignKey(d => d.CategoriaId)
                .HasConstraintName("fk_servicios_categoria");
        });

        modelBuilder.Entity<Turno>(entity =>
        {
            entity.HasKey(e => e.IdTurno).HasName("PK__turnos__C68E739701477532");

            entity.ToTable("turnos");

            entity.Property(e => e.IdTurno)
                .ValueGeneratedNever()
                .HasColumnName("id_turno");
            entity.Property(e => e.EmpleadoAsignado).HasColumnName("empleado_asignado");
            entity.Property(e => e.Fecha).HasColumnName("fecha");
            entity.Property(e => e.HoraTurno).HasColumnName("hora_turno");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Servicio)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("servicio");

            entity.HasOne(d => d.EmpleadoAsignadoNavigation).WithMany(p => p.Turnos)
                .HasForeignKey(d => d.EmpleadoAsignado)
                .HasConstraintName("fk_turnos_empleados");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Turnos)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_turnos_clientes");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("PK__usuarios__4E3E04AD840A6A8B");

            entity.ToTable("usuarios");

            entity.Property(e => e.IdUsuario).HasColumnName("id_usuario");
            entity.Property(e => e.Contraseña)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contraseña");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("fecha_registro");
            entity.Property(e => e.IdRol).HasColumnName("id_rol");
            entity.Property(e => e.NombreUsuario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_usuario");

            entity.HasOne(d => d.IdRolNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdRol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_usuarios_roles");
        });

        modelBuilder.Entity<Venta>(entity =>
        {
            entity.HasKey(e => e.IdVenta).HasName("PK__ventas__459533BF1D72D6CA");

            entity.ToTable("ventas");

            entity.Property(e => e.IdVenta).HasColumnName("id_venta");
            entity.Property(e => e.FechaVenta)
                .HasColumnType("datetime")
                .HasColumnName("fecha_venta");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdEmpleado).HasColumnName("id_empleado");
            entity.Property(e => e.Total)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Venta)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_ventas_cliente");

            entity.HasOne(d => d.IdEmpleadoNavigation).WithMany(p => p.Venta)
                .HasForeignKey(d => d.IdEmpleado)
                .HasConstraintName("fk_ventas_empleados");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}